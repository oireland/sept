generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  HOST
  ATHLETE
  STAFF
}

model User {
  userId            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole
  host          Host?      @relation("User - Host")
  athlete       Athlete?   @relation("User - Athlete")
  staff         Staff?     @relation("User - Staff")
}

model Host {
  hostId         String      @id @default(cuid())
  user       User        @relation("User - Host", fields: [userId], references: [userId], onDelete: Cascade)
  userId     String      @unique
  athletes   Athlete[]   @relation("Host - Athletes")
  events     Event[]     @relation("Host - Events")
  staff      Staff[]     @relation("Host - Staff")
  groups     Group[] @relation("Host - Groups")
  teams      Team[] @relation("Host - Teams")
  locations Location[] @relation("Host - Locations")
  allowAthleteEventSignUp Boolean @default(true)
}

enum BoyOrGirl {
  BOY
  GIRL
}

model Group {
  groupName String
  athletes Athlete[] @relation("Group - Athletes")
  host Host @relation("Host - Groups", fields: [hostId], references: [hostId], onDelete: Cascade)
  hostId String
  events Event[] @relation("Group - Events")
  @@id([groupName, hostId])
}

model Team {
  teamName String
  athletes Athlete[] @relation("Team - Athletes")
  host Host @relation("Host - Teams", fields: [hostId], references: [hostId], onDelete: Cascade)
  hostId String
  hexColour String
  @@id([teamName, hostId])
}

model Athlete {
  athleteId        String    @id @default(cuid())
  group     Group @relation("Group - Athletes", fields: [groupName, hostId], references: [groupName, hostId])
  groupName String
  team      Team @relation("Team - Athletes", fields: [teamName, hostId], references: [teamName, hostId])
  teamName String
  user      User      @relation("User - Athlete", fields: [userId], references: [userId], onDelete: Cascade)
  userId    String    @unique
  host      Host      @relation("Host - Athletes", fields: [hostId], references: [hostId], onDelete: Cascade)
  hostId    String
  events    Event[]   @relation("Athletes - Events")
  boyOrGirl BoyOrGirl
  results   Result[]  @relation("Athlete - Results")
}

model Location {
  locationName String
  events Event[] @relation("Location - Events")
  host Host @relation("Host - Locations", fields: [hostId], references: [hostId], onDelete: Cascade)
  hostId String
  @@id([locationName, hostId])
}

model Staff {
  staffId     String  @id @default(cuid())
  user   User    @relation("User - Staff", fields: [userId], references: [userId], onDelete: Cascade)
  userId String  @unique
  host   Host    @relation("Host - Staff", fields: [hostId], references: [hostId], onDelete: Cascade)
  hostId String
  events Event[] @relation("StaffMember - Events")
}

enum EventType {
  TRACK
  FIELD
  HIGHJUMP
}

model Event {
  eventId                  String    @id @default(cuid())
  name                String
  eventType           EventType
  athletesBoyOrGirl   BoyOrGirl
  group               Group @relation("Group - Events", fields: [groupName, hostId], references: [groupName, hostId])
  groupName String
  host                Host      @relation("Host - Events", fields: [hostId], references: [hostId], onDelete: Cascade)
  hostId              String
  athletesCompeting   Athlete[] @relation("Athletes - Events")
  maxNumberOfAthletesPerTeam Int
  date DateTime
  location Location @relation("Location - Events", fields: [locationName, hostId], references: [locationName, hostId])
  locationName String
  results             Result[]  @relation("Event - Results")
  staffMember         Staff?    @relation("StaffMember - Events", fields: [staffId], references: [staffId])
  staffId             String?
  recordHolderName String?
  yearRecordSet Int?
  recordScore Float?
}

model Result {
  event     Event   @relation("Event - Results", fields: [eventId], references: [eventId], onDelete: Cascade)
  eventId   String
  athlete   Athlete @relation("Athlete - Results", fields: [athleteId], references: [athleteId], onDelete: Cascade)
  athleteId String
  place     Int
  points    Int
  scores Float[]
  @@id([eventId, athleteId])
}
